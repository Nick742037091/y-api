generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model post {
  id           Int           @id @default(autoincrement())
  createUserId Int           @map("create_user_id")
  createTime   DateTime      @default(now()) @map("create_time") @db.DateTime(0)
  content      String        @db.Text
  imgList      String?       @map("img_list") @db.Text
  video        String?       @db.VarChar(500)
  videoPoster  String?       @map("video_poster") @db.VarChar(500)
  gifVideo     String?       @map("gif_video") @db.VarChar(500)
  gifPoster    String?       @map("gif_poster") @db.VarChar(500)
  gifWidth     Int?          @default(0) @map("gif_width") @db.SmallInt
  gifHeight    Int?          @default(0) @map("gif_height") @db.SmallInt
  user         user          @relation(fields: [createUserId], references: [id], onDelete: Cascade)
  postLikes    postLike[]
  postViews    postView[]
  postComments postComment[]

  @@index([createUserId], map: "post_create_user_id_fkey")
}

model postLike {
  id         Int       @id @default(autoincrement())
  post_id    Int
  user_id    Int
  liked      Boolean?
  createTime DateTime  @default(now()) @map("create_time") @db.DateTime(0)
  updateTime DateTime? @default(now()) @map("update_time") @db.DateTime(0)
  post       post      @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user       user      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([post_id], map: "post_like_post_id_fkey")
  @@index([user_id], map: "post_like_user_id_fkey")
  @@map("post_like")
}

model postView {
  id         Int      @id @default(autoincrement())
  post_id    Int
  user_id    Int
  createTime DateTime @default(now()) @map("create_time") @db.DateTime(0)
  post       post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([post_id], map: "post_view_post_id_fkey")
  @@index([user_id], map: "post_view_user_id_fkey")
  @@map("post_view")
}

model postComment {
  id         Int       @id @default(autoincrement())
  postId     Int       @map("post_id")
  userId     Int       @map("user_id")
  content    String
  imgList    String?   @map("img_list") @db.Text
  createTime DateTime  @default(now()) @map("create_time") @db.DateTime(0)
  updateTime DateTime? @default(now()) @updatedAt @map("update_time") @db.DateTime(0)
  post       post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user       user      @relation(fields: [userId], references: [id], onDelete: Cascade)

  parentId   Int?      @map("parent_id")
  parent     postComment? @relation("CommentToChildren", fields: [parentId], references: [id])
  children   postComment[] @relation("CommentToChildren")
  replyToId  Int?      @map("reply_to_id")
  replyTo    postComment? @relation("CommentToReply", fields: [replyToId], references: [id], onDelete: Cascade)
  replyFrom  postComment[] @relation("CommentToReply")

  @@index([postId], map: "post_comment_post_id_fkey")
  @@index([userId], map: "post_comment_user_id_fkey")
  @@index([parentId], map: "post_comment_parent_id_fkey")
  @@index([replyToId], map: "post_comment_reply_to_id_fkey")
  @@map("post_comment")
}

model user {
  id            Int           @id @default(autoincrement())
  createTime    DateTime      @default(now()) @map("create_time") @db.DateTime(0)
  updateTime    DateTime      @default(now()) @updatedAt @map("update_time") @db.DateTime(0)
  followingNum  Int           @default(0) @map("following_num")
  followerNum   Int           @default(0) @map("follower_num")
  userName      String        @map("user_name") @db.VarChar(255)
  password      String        @db.VarChar(255)
  fullName      String        @default("") @map("full_name") @db.VarChar(255)
  avatar        String        @default("") @db.VarChar(255)
  description   String?       @db.Text
  profileBanner String?       @map("profile_banner") @db.VarChar(500)
  post          post[]
  postLikes     postLike[]
  postViews     postView[]
  postComments  postComment[]
}
